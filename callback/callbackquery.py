from aiogram import types, Router, F
from aiogram.types import CallbackQuery, Message

import commands.commands
from data.database import DataBase
from keyboards.inline import MyCallBack, MyLocation, ToBuy, menu_start, ToAdmin, ToProf
from keyboards.inline import sale_menu, location, list_pay, menu_profile

db = DataBase('mainbase.db')
call_router = Router()


@call_router.callback_query(MyCallBack.filter(F.zap == "profile"))
async def buy(call: CallbackQuery):
    data = db.take_bonus(call.message.chat.id)
    await call.message.answer(f'–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å {call.message.chat.first_name}'
                              f'\n\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫: {db.count_pays(call.message.chat.id)}'
                              f'\n\n–¢—ã –ø—Ä–∏–≤—ë–ª: {db.prof_friends(call.message.chat.id)} –¥—Ä—É–∑–µ–π'
                              f'\n\n–ë–æ–Ω—É—Å—ã: {db.check_bonus(call.message.chat.id)}', reply_markup=menu_profile())


@call_router.callback_query(MyCallBack.filter(F.zap == "buy"))
async def buy(call: CallbackQuery):
    await call.message.answer('üå≤–í—ã–±–µ—Ä–∏ —Ç–æ–≤–∞—Ä. –ö–æ–ª–ª–∏—á–µ—Å—Ç–≤–æ —É–∫–∞–∑–∞–Ω–æ –≤ —Å–∫–æ–±–æ—á–∫–∞—Ö..', reply_markup=sale_menu())


@call_router.callback_query(MyCallBack.filter(F.zap == "gramm"))
async def buy(call: CallbackQuery):
    user_id = call.message.chat.id
    db.add_product(user_id, '–ì—Ä–∞–º–º', 3000)
    await call.message.answer('üèò –í—ã–±–µ—Ä–∏ —Ä–∞–π–æ–Ω...', reply_markup=location())
    await call.message.delete()


@call_router.callback_query(MyCallBack.filter(F.zap == "polka"))
async def buy(call: CallbackQuery):
    user_id = call.message.chat.id
    db.add_product(user_id, '–ü–æ–ª –≥—Ä–∞–º–º–∞', 1500)
    await call.message.answer('üèò –í—ã–±–µ—Ä–∏ —Ä–∞–π–æ–Ω...', reply_markup=location())
    await call.message.delete()


@call_router.callback_query(MyCallBack.filter(F.zap == "full"))
async def buy(call: CallbackQuery):
    user_id = call.message.chat.id
    db.add_product(user_id, '–ö–æ—Ä–∞–±–ª—å', 2000)
    await call.message.answer('üèò –í—ã–±–µ—Ä–∏ —Ä–∞–π–æ–Ω...', reply_markup=location())
    await call.message.delete()


@call_router.callback_query(MyCallBack.filter(F.zap == "path_full"))
async def buy(call: CallbackQuery):
    user_id = call.message.chat.id
    db.add_product(user_id, '–ü–æ–ª –∫–æ—Ä–∞–±–ª—è', 1000)
    await call.message.answer('üèò –í—ã–±–µ—Ä–∏ —Ä–∞–π–æ–Ω...', reply_markup=location())
    await call.message.delete()


@call_router.callback_query(MyCallBack.filter(F.zap == "glass"))
async def buy(call: CallbackQuery):
    user_id = call.message.chat.id
    db.add_product(user_id, '–°—Ç–∞–∫–∞–Ω', 25000)
    await call.message.answer('üèò –í—ã–±–µ—Ä–∏ —Ä–∞–π–æ–Ω...', reply_markup=location())
    await call.message.delete()


@call_router.callback_query(MyCallBack.filter(F.zap == "decl"))
async def buy(call: CallbackQuery):
    user_id = call.message.chat.id
    db.add_product(user_id, '–ü—è—Ç–∫–∞', 500)
    await call.message.answer('üèò –í—ã–±–µ—Ä–∏ —Ä–∞–π–æ–Ω...', reply_markup=location())
    await call.message.delete()


### –≤—ã–±–æ—Ä –ª–æ–∫–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

@call_router.callback_query(MyLocation.filter(F.loc == 'city'))
async def buy(call: CallbackQuery):
    user_id = call.message.chat.id
    db.add_location(user_id, '–¶–µ–Ω—Ç—Ä')
    res = db.list_pay(user_id)
    data = db.check_product_availability(res[3], res[2])
    if data != 0:
        await call.message.answer(f'–ü—Ä–æ–≤–µ—Ä—å –∑–∞–∫–∞–∑...\n\n–¢–æ–≤–∞—Ä - {res[2]}\n–†–∞–π–æ–Ω - {res[3]}\n–°—É–º–º–∞ - {res[4]} —Ä—É–±–ª–µ–π\n', reply_markup=list_pay())
    else:
        await call.message.answer('–∫ —Å–æ–∂–∞–ª–µ–Ω–∏—é –≤ –¥–∞–Ω–Ω–æ–º —Ä–∞–π–æ–Ω–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ç–æ–≤–∞—Ä\n–í—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥—É—é –ª–æ–∫–∞—Ü–∏—é..')
    await call.message.delete()


@call_router.callback_query(MyLocation.filter(F.loc == 'block'))
async def buy(call: CallbackQuery):
    user_id = call.message.chat.id
    db.add_location(user_id, '–ë–ª–æ—á–æ–∫')
    res = db.list_pay(user_id)
    await call.message.answer(
        f'–ü—Ä–æ–≤–µ—Ä—å –∑–∞–∫–∞–∑...\n\n–¢–æ–≤–∞—Ä - {res[2]}\n–†–∞–π–æ–Ω - {res[3]}\n–°—É–º–º–∞ - {res[4]} —Ä—É–±–ª–µ–π\n',
        reply_markup=list_pay())
    await call.message.delete()


@call_router.callback_query(MyLocation.filter(F.loc == 'filtry'))
async def buy(call: CallbackQuery):
    user_id = call.message.chat.id
    db.add_location(user_id, '–§–∏–ª—å—Ç—Ä–æ–≤–∞–ª—å–Ω–∞—è')
    res = db.list_pay(user_id)
    await call.message.answer(
        f'–ü—Ä–æ–≤–µ—Ä—å –∑–∞–∫–∞–∑...\n\n–¢–æ–≤–∞—Ä - {res[2]}\n–†–∞–π–æ–Ω - {res[3]}\n–°—É–º–º–∞ - {res[4]} —Ä—É–±–ª–µ–π\n',
        reply_markup=list_pay())
    await call.message.delete()


@call_router.callback_query(MyLocation.filter(F.loc == 'vatut'))
async def buy(call: CallbackQuery):
    user_id = call.message.chat.id
    db.add_location(user_id, '–í–∞—Ç—É—Ç–∏–Ω–æ')
    res = db.list_pay(user_id)
    await call.message.answer(
        f'–ü—Ä–æ–≤–µ—Ä—å –∑–∞–∫–∞–∑...\n\n–¢–æ–≤–∞—Ä - {res[2]}\n–†–∞–π–æ–Ω - {res[3]}\n–°—É–º–º–∞ - {res[4]} —Ä—É–±–ª–µ–π\n',
        reply_markup=list_pay())
    await call.message.delete()


@call_router.callback_query(MyLocation.filter(F.loc == 'red'))
async def buy(call: CallbackQuery):
    user_id = call.message.chat.id
    db.add_location(user_id, '–ö—Ä–∞—Å–Ω—ã–π –≥–æ—Ä–æ–¥–æ–∫')
    res = db.list_pay(user_id)
    await call.message.answer(
        f'–ü—Ä–æ–≤–µ—Ä—å –∑–∞–∫–∞–∑...\n\n–¢–æ–≤–∞—Ä - {res[2]}\n–†–∞–π–æ–Ω - {res[3]}\n–°—É–º–º–∞ - {res[4]} —Ä—É–±–ª–µ–π\n',
        reply_markup=list_pay())
    await call.message.delete()


@call_router.callback_query(MyLocation.filter(F.loc == 'zuev'))
async def buy(call: CallbackQuery):
    user_id = call.message.chat.id
    db.add_location(user_id, '–ó—É–µ–≤—Å–∫–∏–π')
    res = db.list_pay(user_id)
    await call.message.answer(
        f'–ü—Ä–æ–≤–µ—Ä—å –∑–∞–∫–∞–∑...\n\n–¢–æ–≤–∞—Ä - {res[2]}\n–†–∞–π–æ–Ω - {res[3]}\n–°—É–º–º–∞ - {res[4]} —Ä—É–±–ª–µ–π\n',
        reply_markup=list_pay())
    await call.message.delete()


@call_router.callback_query(ToBuy.filter(F.buy == 'cancel_pay'))
async def cancel_pay(call: CallbackQuery):
    await db.clear_payment_bd(call.message.chat.id)  # –æ—Ç—á–∏—â–∞–µ–º –ø–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã
    await call.message.answer('–û—Ç–º–µ–Ω–∞ –∑–∞–∫–∞–∑–∞', reply_markup=menu_start())


@call_router.callback_query(ToProf.filter(F.prof == 'take_bonus'))
async def cancel_pay(call: CallbackQuery):
    await call.message.answer('–í–æ—Ç –ë–æ–Ω—É—Å!')








